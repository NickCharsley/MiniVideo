/*!
 * COPYRIGHT (C) 2010 Emeric Grange - All Rights Reserved
 *
 * This file is part of MiniVideo.
 *
 * MiniVideo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MiniVideo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with MiniVideo.  If not, see <http://www.gnu.org/licenses/>.
 *
 * \file      typedef.h
 * \author    Emeric Grange <emeric.grange@gmail.com>
 * \date      2010
 */

#ifndef TYPEDEF_H
#define TYPEDEF_H

// Contains some #define generated by CMake
#include "cmake_defines.h"

/* ************************************************************************** */

// Custom return codes
#define FAILURE     0
#define SUCCESS     1
#define UNSUPPORTED 2

#if ENABLE_LARGEFILE
    // This section is deprecated
    #define fopen(a, b)      fopen64(a, b)
    #define ftell(a)         ftello64(a)
    #define ftello(a)        ftello64(a)
    #define fseeko(a, b, c)  fseeko64(a, b, c)
    #define fseek(a, b, c)   fseeko64(a, b, c)
    #define lseek(a, b, c)   lseek64(a, b, c)
#else
    // Just build MiniVideo with -D_LARGEFILE64_SOURCE
#endif /* ENABLE_LARGEFILE */


#if ENABLE_STDINT
    #include <stdint.h>
#else
    // Defines custom types (if C99 <stdint.h> is not available)
    // These types may have already been defined by your compiler

    typedef signed char        int8_t;
    typedef signed short       int16_t;
    typedef signed int         int32_t;
    typedef signed long long   int64_t;

    typedef unsigned char      uint8_t;
    typedef unsigned short     uint16_t;
    typedef unsigned int       uint32_t;
    typedef unsigned long long uint64_t;
#endif /* ENABLE_STDINT */


#if ENABLE_STDBOOL
    #include <stdbool.h>
#else
    // Software boolean implementation (if C99 <stdbool.h> is not available)

    typedef unsigned int   bool;
    #define true	   1
    #define false	   0
#endif /* ENABLE_STDBOOL */


#if ENABLE_COLORS
    // Colors for console output

    #define RESET   "\e[0;m" //!< Reset colored output to default terminal color
    #define RED     "\e[1;31m"
    #define GREEN   "\e[1;32m"
    #define YELLOW  "\e[1;33m"
    #define BLUE    "\e[1;34m"
    #define PURPLE  "\e[1;35m"
    #define CYAN    "\e[1;36m"
    #define WHITE   "\e[1;37m"
#else
    #define RESET
    #define RED
    #define GREEN
    #define YELLOW
    #define BLUE
    #define PURPLE
    #define CYAN
    #define WHITE
#endif /* ENABLE_COLORS */

/* ************************************************************************** */
#endif /* TYPEDEF_H */
